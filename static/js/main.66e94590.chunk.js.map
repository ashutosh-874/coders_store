{"version":3,"sources":["utilities/utilities.js","features/cart/cartSlice.js","data.js","features/inventory/inventorySlice.js","features/inventory/Inventory.js","features/currencyFilter/CurrencyFilter.js","features/currencyFilter/currencyFilterSlice.js","features/cart/Cart.js","features/searchTerm/searchTermSlice.js","features/searchTerm/SearchTerm.js","app/App.js","app/store.js","index.js"],"names":["calculatePrice","price","currency","getCurrencySymbol","currencyFilter","initialCart","inventoryData","name","img","currenciesData","initialInventory","Inventory","inventory","searchTerm","dispatch","useEffect","type","payload","length","filterdItem","items","filter","toLowerCase","includes","getFilteredItems","id","map","inventoryItem","displayPrice","className","src","alt","toFixed","onClick","onClickHandler","CurrencyFilter","setCurrency","Cart","props","cart","cartElements","Object","keys","item","quantity","value","onChange","e","input","newQuantity","Number","changeItemQuantity","onInputChangeHandler","target","Array","_","index","total","totalUSD","forEach","itemName","calculateTotal","SearchTerm","userInput","placeholder","App","state","store","createStore","combineReducers","action","newItem","itemToUpdate","updatedItem","render","ReactDOM","getState","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.66e94590.chunk.js","sourcesContent":["export function calculatePrice(price, currency) {\r\n    switch (currency) {\r\n      case 'EUR':\r\n        return price * 0.86;\r\n      case 'CAD':\r\n        return price * 1.33;\r\n      default:\r\n        return price;\r\n    }\r\n  }\r\n  \r\n  export function calculateTotal(cart, currency) {\r\n    let totalUSD = 0;\r\n    Object.keys(cart).forEach((itemName) => {\r\n      totalUSD += cart[itemName].price * cart[itemName].quantity;\r\n    });\r\n    return calculatePrice(totalUSD, currency).toFixed(2);\r\n  }\r\n  \r\n  export function getCurrencySymbol(currencyFilter) {\r\n    switch (currencyFilter) {\r\n      case 'USD':\r\n        return '$';\r\n      case 'EUR':\r\n        return 'â‚¬';\r\n      case 'CAD':\r\n        return '$';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n  ","export const addItem = (itemToAdd) => {\r\n\treturn {\r\n\t\ttype: 'cart/addItem',\r\n\t\tpayload: itemToAdd,\r\n\t};\r\n};\r\n\r\n// Create your changeItemQuantity action creator here.\r\nexport const changeItemQuantity = (name, newQuantity) => {\r\n\treturn {\r\n\t\ttype: 'cart/changeItemQuantity',\r\n\t\tpayload: {\r\n\t\t\tname: name,\r\n\t\t\tnewQuantity: newQuantity\r\n\t\t}\r\n\t}\r\n}\r\n  \r\n\r\n  \r\n\r\nconst initialCart = {};\r\n  \r\nexport const cartReducer = (cart = initialCart, action) => {\r\n    switch (action.type) {\r\n\t\tcase 'cart/addItem': {\r\n\t\t\tconst { name, price } = action.payload;\r\n\r\n\t\t\t// if the item already exists, increase the quantity by 1, otherwise set it to 1\r\n\t\t\tconst quantity = cart[name] ? cart[name].quantity + 1 : 1;\r\n\t\t\tconst newItem = { price, quantity };\r\n\r\n\t\t\t// Add the new item to the cart (or replace it if it existed already)\r\n\t\t\treturn { \r\n\t\t\t\t...cart, \r\n\t\t\t\t[name]: newItem \r\n\t\t\t};\r\n    \t}\r\n\t\tcase 'cart/changeItemQuantity': {\r\n\t\t\tconst { name, newQuantity } = action.payload;\r\n\t\t\tconst itemToUpdate = cart[name];\r\n\r\n\t\t\t// Create a copy of itemToUpdate and update the quantity prop.\r\n\t\t\tconst updatedItem = {\r\n\t\t\t\t...itemToUpdate,\r\n\t\t\t\tquantity: newQuantity\r\n\t\t\t}\r\n\t\t\t// Return a copy of the cart with the updatedItem included.\r\n\t\t\treturn {\r\n\t\t\t\t...cart, \r\n\t\t\t\t[name]: updatedItem\t\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn cart;\r\n\t\t}\r\n\t}\r\n};","export const inventoryData = [\r\n    { name: 'Hello World Hat', price: 23.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hello-world-hat.jpg' },\r\n    { name: 'Learn From Home Joggers', price: 45.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sweatpants.jpg' },\r\n    { name: 'Java Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/java-tee.jpg' },\r\n    { name: 'Python Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/python-tee.jpg' },\r\n    { name: 'SQL Tee', price: 17.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/sql-tee.jpg' },\r\n    { name: 'Hello World Hoodie', price: 49.99, img: 'https://static-assets.codecademy.com/Courses/Learn-Redux/codecademy-store/hoodie.jpg' },\r\n  ];\r\n  \r\n  export const currenciesData = ['USD', 'EUR', 'CAD'];","import { inventoryData } from '../../data.js';\r\n\r\nexport const loadData = (data) => {\r\n  return {\r\n    type: 'inventory/loadData',\r\n    payload: inventoryData,\r\n  };\r\n};\r\n\r\nconst initialInventory = [];\r\nexport const inventoryReducer = (inventory = initialInventory, action) => {\r\n  switch (action.type) {\r\n    case 'inventory/loadData': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return inventory;\r\n    }\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport {\r\n  calculatePrice,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities.js';\r\nimport { addItem } from '../cart/cartSlice.js';\r\nimport { loadData } from './inventorySlice';\r\n\r\nexport const Inventory = ({ inventory, currencyFilter,searchTerm, dispatch }) => {\r\n  const onMount = () => {\r\n    dispatch(loadData());\r\n  };\r\n  useEffect(onMount, [dispatch]);\r\n\r\n  const onClickHandler = (inventoryItem) => {\r\n    dispatch(addItem(inventoryItem));\r\n  };\r\n\r\n  if (inventory.length === 0) {\r\n    return <p> Sorry, no products are currently available... </p>;\r\n  }\r\n\r\n  const filterdItem = getFilteredItems(inventory, searchTerm)\r\n\r\n  return <ul id=\"inventory-container\">{filterdItem.map(createInventoryItem)}</ul>;\r\n\r\n  function createInventoryItem(inventoryItem) {\r\n    const { price, name, img } = inventoryItem;\r\n    const displayPrice = calculatePrice(price, currencyFilter);\r\n    return (\r\n      <li key={name} className=\"item\">\r\n        <img src={img} alt={''} />\r\n        <h3>{name}</h3>\r\n        <h3 className=\"price\">\r\n          {getCurrencySymbol(currencyFilter)}\r\n          {displayPrice.toFixed(2)} {currencyFilter}\r\n        </h3>\r\n        <button\r\n          onClick={() => onClickHandler(inventoryItem)}\r\n          className=\"add-to-cart-button\"\r\n        >\r\n          Add to Cart\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  function getFilteredItems(items, searchTerm) {\r\n    return items.filter(items => items.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport { currenciesData } from '../../data';\r\nimport { setCurrency } from './currencyFilterSlice.js';\r\n\r\nexport const CurrencyFilter = ({ currencyFilter, dispatch }) => {\r\n  const onClickHandler = (currency) => {\r\n    dispatch(setCurrency(currency));\r\n  };\r\n\r\n  return (\r\n    <div id=\"currency-filters-container\">\r\n      <h3>Choose a currency</h3>\r\n      {currenciesData.map(createCurrencyButton)}\r\n    </div>\r\n  );\r\n\r\n  function createCurrencyButton(currency) {\r\n    return (\r\n      <button\r\n        className={`currency-button ${\r\n          currencyFilter === currency && 'selected'\r\n        }`}\r\n        key={currency}\r\n        onClick={() => onClickHandler(currency)}\r\n      >\r\n        {currency}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n","const initialCurrencyFilter = 'USD';\r\nexport const currencyFilterReducer = (\r\n  currencyFilter = initialCurrencyFilter,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case 'currencyFilter/setCurrency': {\r\n      return action.payload;\r\n    }\r\n    default: {\r\n      return currencyFilter;\r\n    }\r\n  }\r\n};\r\n\r\nexport const setCurrency = (currency) => {\r\n  return {\r\n    type: 'currencyFilter/setCurrency',\r\n    payload: currency,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport {\r\n  calculateTotal,\r\n  getCurrencySymbol,\r\n} from '../../utilities/utilities.js';\r\nimport {changeItemQuantity} from './cartSlice'\r\n\r\n// Import the changeItemQuantity() action creator.\r\n\r\nexport const Cart = (props) => {\r\n\tconst { cart, currencyFilter, dispatch } = props;\r\n\r\n\tconst onInputChangeHandler = (name, input) => {\r\n\t\t// If the user enters a bad value...\r\n\t\tif (input === '') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Otherwise, convert the input into a number and pass it along as the newQuantity.\r\n\t\tconst newQuantity = Number(input);\r\n\r\n\t\t// Dispatch an action to change the quantity of the given name and quantity.\r\n\t\tdispatch(changeItemQuantity(name, newQuantity))\r\n\t};\r\n\r\n  // Use the cart and currencyFilter slices to render their data.\r\n\tconst cartElements = Object.keys(cart).map(createCartItem);\r\n\r\n\r\n\tconst total = calculateTotal(cart, currencyFilter);\r\n\r\n\treturn (\r\n\t\t<div id=\"cart-container\">\r\n\t\t\t<ul id=\"cart-items\">{cartElements}</ul>\r\n\t\t\t<h3 className=\"total\">\r\n\t\t\tTotal{' '}\r\n\t\t\t<span className=\"total-value\">\r\n\t\t\t\t{getCurrencySymbol(currencyFilter)}{total} {currencyFilter}\r\n\t\t\t</span>\r\n\t\t\t</h3>\r\n\t\t</div>\r\n\t);\r\n\r\n\tfunction createCartItem(name) {\r\n\t\tconst item = cart[name];\r\n\r\n\t\tif (item.quantity === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<li key={name}>\r\n\t\t\t\t<p>{name}</p>\r\n\t\t\t\t<select\r\n\t\t\t\t\tclassName=\"item-quantity\"\r\n\t\t\t\t\tvalue={item.quantity}\r\n\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\tonInputChangeHandler(name, e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{[...Array(100).keys()].map((_, index) => (\r\n\t\t\t\t\t\t<option key={index} value={index}>\r\n\t\t\t\t\t\t{index}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t</li>\r\n\t\t);\r\n\t}\r\n};\r\n","/*\r\nExtra Credit:\r\n1. Create a function called searchTermReducer that can handle the following action types:\r\n    * 'searchTerm/setSearchTerm'\r\n    * 'searchTerm/clearSearchTerm'\r\n    * Don't forget to set the initial state and return state by default!\r\n\r\n2. Create a function called setSearchTerm\r\n    * It has one parameter, term\r\n    * It returns an action object whose payload is the term value\r\n    * See SearchTerm.js for how this will be used.\r\n\r\n3. Create a function called clearSearchTerm\r\n    * It returns an action object with no payload\r\n    * See SearchTerm.js for how this will be used.\r\n\r\n*/\r\n\r\n\r\nexport const setSearchTerm = (term) => {\r\n    return {\r\n        type: 'search/setSearchTerm',\r\n        payload: term\r\n    }\r\n}\r\n\r\nexport const clearSearchTerm = (term) => {\r\n    return {\r\n        type: 'search/clearSearchTerm'\r\n    }\r\n}\r\n\r\nfunction getFilteredItems(items, searchTerm) {\r\n    return items.filter(items => items.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n}\r\n\r\n\r\nexport const searchTermReducer = (state = '', action) => {\r\n    switch (action.type) {\r\n        case 'search/setSearchTerm':\r\n            return action.payload;\r\n\r\n        case 'search/clearSearchTerm':\r\n            return '';\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport { setSearchTerm, clearSearchTerm } from './searchTermSlice.js';\r\n\r\nconst searchIconUrl =\r\n  'https://static-assets.codecademy.com/Courses/Learn-Redux/Recipes-App/icons/search.svg';\r\nconst clearIconUrl =\r\n  'https://static-assets.codecademy.com/Courses/Learn-Redux/Recipes-App/icons/clear.svg';\r\n\r\nexport const SearchTerm = (props) => {\r\n  const { searchTerm, dispatch } = props;\r\n\r\n  const onSearchTermChangeHandler = (e) => {\r\n    const userInput = e.target.value;\r\n    dispatch(setSearchTerm(userInput));\r\n  };\r\n\r\n  const onClearSearchTermHandler = () => {\r\n    dispatch(clearSearchTerm());\r\n  };\r\n\r\n  return (\r\n    <div id=\"search-container\">\r\n      <img id=\"search-icon\" alt=\"\" src={searchIconUrl} />\r\n      <input\r\n        id=\"search\"\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={onSearchTermChangeHandler}\r\n        placeholder=\"Search products\"\r\n      />\r\n      {searchTerm.length > 0 && (\r\n        <button\r\n          onClick={onClearSearchTermHandler}\r\n          type=\"button\"\r\n          id=\"search-clear-button\"\r\n        >\r\n          <img src={clearIconUrl} alt=\"\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\n\nimport { Inventory } from '../features/inventory/Inventory.js';\nimport { CurrencyFilter } from '../features/currencyFilter/CurrencyFilter.js';\n// Import the Cart component here.\nimport { Cart } from '../features/cart/Cart.js';\nimport { SearchTerm } from '../features/searchTerm/SearchTerm.js';\n// Render the Cart component below <Inventory />\nexport const App = (props) => {\n\n  const { state, dispatch } = props;\n\n  return (\n    <div>\n      <CurrencyFilter\n        currencyFilter={state.currencyFilter}\n        dispatch={dispatch}\n      />\n\n      <SearchTerm\n        searchTerm={state.searchTerm}\n        dispatch={dispatch}\n      />\n\n      <Inventory\n        inventory={state.inventory}\n        currencyFilter={state.currencyFilter}\n        searchTerm={state.searchTerm}\n        dispatch={dispatch}\n      />\n\n      <Cart\n        cart = {state.cart}\n        currencyFilter = {state.currencyFilter}\n        dispatch={dispatch}\n      />\n\n    </div>\n  );\n};\n","// Import createStore and combineReducers here.\r\nimport { createStore, combineReducers } from 'redux'\r\n\r\n// Import the slice reducers here.\r\nimport { inventoryReducer } from '../features/inventory/inventorySlice.js'\r\nimport { cartReducer } from '../features/cart/cartSlice.js'\r\nimport { currencyFilterReducer } from '../features/currencyFilter/currencyFilterSlice.js'\r\nimport { searchTermReducer } from '../features/searchTerm/searchTermSlice.js'\r\n\r\n\r\n// Create and export the store here.\r\nexport const store = createStore(combineReducers({\r\n    inventory: inventoryReducer,\r\n    cart: cartReducer,\r\n    currencyFilter: currencyFilterReducer,\r\n    searchTerm: searchTermReducer\r\n}))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './app/App';\nimport { store } from './app/store'\n\n// Pass state and dispatch props to the <App /> component.\nconst render = () => {\n  ReactDOM.render(\n    <App \n      state = {store.getState()}\n      dispatch = {store.dispatch}\n    />,\n    document.getElementById('root')\n  )\n};\nrender();\n\n// Subscribe render to the store.\nstore.subscribe(render)"],"sourceRoot":""}